import styled from "@emotion/styled";
import { zodResolver } from "@hookform/resolvers/zod";
import { type NextPage } from "next";
import Head from "next/head";
import type { UseFormProps } from "react-hook-form";
import { useForm } from "react-hook-form";
import { mountStoreDevtool } from "simple-zustand-devtools";
import tw from "twin.macro";
import { z } from "zod";
import { ListAppendix } from "../components/step/listAppendix";
import { ListDate } from "../components/step/listDate";
import { ListSummary } from "../components/step/listSummary";
import { ListTitle } from "../components/step/listTitle";
import { useCreateListStore } from "../store/list";
import { trpc } from "../utils/trpc";

export const ValidationSchema = z.object({
  authorId: z.number(),
  listName: z
    .string()
    .min(3)
    .refine((data) => data.length > 3, {
      message: "Listnamnet behöver innehålla minst tre ord",
    }),
  dueDate: z.date(),
  belongsToUser: z.boolean(),
});

export type ListSchemaType = z.infer<typeof ValidationSchema>;

export function useZodForm<TSchema extends z.ZodType>(
  props: Omit<UseFormProps<TSchema["_input"]>, "resolver"> & {
    schema: TSchema;
  }
) {
  const form = useForm<TSchema["_input"]>({
    ...props,
    resolver: zodResolver(props.schema, undefined),
  });

  return form;
}

const StepCounter = styled.div<{ $step: number }>`
  ${tw`bg-gradient-to-br from-pink-500 to-orange-400 h-full rounded-tl-md duration-700 ease-out`}
  ${({ $step }) => {
    switch ($step) {
      case 1:
        return tw`w-1/3`;
      case 2:
        return tw`w-1/2`;
      case 3:
        return tw`w-full rounded-tr-md`;
    }
  }}
`;

if (process.env.NODE_ENV === "development") {
  mountStoreDevtool("Store", useCreateListStore);
}

const Create: NextPage = () => {
  const utils = trpc.useContext();
  const formValue = useCreateListStore((state) => state.formValue);
  const formIsValid = useCreateListStore((state) => state.formIsValid);
  const currentStep = useCreateListStore((state) => state.currentStep);
  const setNextStep = useCreateListStore((state) => state.setNextStep);
  const setFormIsValid = useCreateListStore((state) => state.setFormIsValid);

  const addList = trpc.wishlist.add.useMutation({
    async onSuccess() {
      await utils.wishlist.list.invalidate();
    },
  });

  if (formIsValid) {
    addList.mutateAsync(formValue);
    setFormIsValid(false);
  }

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return <ListTitle onSubmit={setNextStep} />;
      case 2:
        return <ListDate onSubmit={setNextStep} />;
      case 3:
        return <ListSummary onSubmit={() => setFormIsValid(true)} />;
      default:
        break;
    }
  };

  return (
    <>
      <Head>
        <title>Skapa din lista</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex min-h-screen flex-col bg-gray-900">
        <ListAppendix />
        <div className="container mx-auto flex flex-col items-center justify-center gap-12 px-4 py-16">
          <div className="rounded-md bg-gray-800 shadow-md xl:w-[55%]">
            <div className="h-2 w-full rounded-tl-md rounded-tr-md bg-white">
              <StepCounter $step={currentStep} />
            </div>
            {renderStep()}
          </div>
        </div>
      </div>
    </>
  );
};

export default Create;
